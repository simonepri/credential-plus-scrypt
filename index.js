'use strict';

const scrypt = require('scrypt');
const Buffer = require('safe-buffer').Buffer;

/**
 * Default configurations used to generate a new hash.
 * @private
 * @type {Object}
 */
const defaultConfigs = {
  // The maximum amount of time in seconds scrypt will spend when computing the
  // derived key.
  maxtime: 0.15,
  // The maximum number of bytes of RAM used when computing the derived
  // encryption key. If not present, will default to 0.
  maxmem: 0,
  // A double value between 0.0 and 1.0, representing the fraction (normalized
  // percentage value) of the available RAM used when computing the derived key.
  // If not present, will default to 0.5.
  maxmemfrac: 0.5,
};

/**
 * Applies the hashing algorithm to the provided password.
 * @public
 * @param  {string} password The password to hash.
 * @param  {Object} [options] Configurations passed to the hashing function.
 * @param  {number} [options.maxtime] The maximum amount of time in seconds
 * spent to compute the derived key.
 * @param  {number} [options.maxmem] The maximum number of bytes of RAM used
 * when computing the derived encryption key.
 * @param  {number} [options.maxmemfrac] The fraction of the available RAM used
 * when computing the derived key.
 * @return {Promise.<string>} The generated hash string.
 */
function hash(password, options) {
  if (typeof password !== 'string' || password.length === 0) {
    return Promise.reject(
      new TypeError('Password must be a non-empty string.')
    );
  }
  if (options !== undefined && typeof options !== 'object') {
    return Promise.reject(new TypeError('Options must be an object.'));
  }

  const cfgs = Object.assign(defaultConfigs, options);

  return new Promise((resolve, reject) => {
    scrypt
      .params(cfgs.maxtime, cfgs.maxmem, cfgs.maxmemfrac)
      .then(params => scrypt.kdf(password, params))
      .then(hash => resolve(hash.toString('base64')))
      .catch(reject);
  });
}

/**
 * Determines whether the user's input matches the stored password or not.
 * @public
 * @param  {string} hash The hash string generated by this package.
 * @param  {string} password The User's password input.
 * @return {Promise.<boolean>} A boolean that is true if the hash computed for
 * the password matches the provided hash.
 */
function verify(hash, password) {
  if (typeof hash !== 'string' || hash.length === 0) {
    return Promise.reject(new TypeError('Hash must be a non-empty string.'));
  }
  if (typeof password !== 'string' || password.length === 0) {
    return Promise.reject(
      new TypeError('Password must be a non-empty string.')
    );
  }

  return scrypt.verifyKdf(Buffer.from(hash, 'base64'), Buffer.from(password));
}

module.exports = {
  hash,
  verify,
};
